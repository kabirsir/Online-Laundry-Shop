#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Notification {
private:
    string message;

public:
    // Constructor
    Notification(const string& _message) : message(_message) {}

    // Function to display notification
    void displayNotification() const {
        cout << "Order Completed " << message << endl;
    }
};

class Feedback {
private:
    string feedback;

public:
    // Constructor
    Feedback(const string& _feedback) : feedback(_feedback) {}

    // Function to display feedback
    void displayFeedback() const {
        cout << "Feedback: " << feedback << endl;
    }
};

class PaymentProcessor {
public:
    // Method to simulate payment processing
    void processPayment() {
        cout << "Please enter your payment details:" << endl;
        // Here you can simulate payment processing logic, such as prompting for credit card details
        // For simplicity, let's assume payment is successful if the user enters any input
        string paymentDetails;
        cout << "Enter credit/debit card details: ";
        cin >> paymentDetails;
        cout << "Payment processed successfully!" << endl;
    }
};

class Service {
private:
    string name;
    double price;

public:
    // Constructor
    Service(const string& _name, double _price) : name(_name), price(_price) {}

    // Getter functions
    string getName() const { return name; }
    double getPrice() const { return price; }
};

class LaundryItem {
private:
    int id;
    string name;
    double weight; // Weight of the item in kilograms
    string material; // Material of the item (e.g., cotton, wool)
    bool isWashed; // Whether the item has been washed

public:
    // Constructor
    LaundryItem(int _id, string _name, double _weight, string _material)
        : id(_id), name(_name), weight(_weight), material(_material), isWashed(false) {}

    // Getter functions
    int getId() const { return id; }
    string getName() const { return name; }
    double getWeight() const { return weight; }
    string getMaterial() const { return material; }
    bool getIsWashed() const { return isWashed; }

    // Function to mark item as washed
    void markAsWashed() {
        isWashed = true;
        cout << name << " has been washed." << endl;
    }
};

class LaundryOrder {
private:
    int orderId;
    vector<LaundryItem*> items;
    string status;
    Feedback* feedback; // Feedback for the order
    Notification* notification; // Notification for the order

public:
    // Constructor
    LaundryOrder(int _orderId) : orderId(_orderId), status("Pending"), feedback(nullptr), notification(nullptr) {}

    // Destructor to free memory for feedback and notification
    ~LaundryOrder() {
        delete feedback;
        delete notification;
    }

    // Getter functions
    int getOrderId() const { return orderId; }
    string getStatus() const { return status; }

    // Function to add an item to the order
    void addItem(LaundryItem* item) {
        items.push_back(item);
    }

    // Function to update order status
    void updateStatus(const string& newStatus) {
        status = newStatus;
    }

    // Function to add feedback
    void addFeedback(const string& fb) {
        feedback = new Feedback(fb);
    }

    // Function to add notification
    void addNotification(const string& msg) {
        notification = new Notification(msg);
    }

    // Function to display order details
    void displayOrder() const {
        cout << "Order ID: " << orderId << endl;
        cout << "Status: " << status << endl;
        cout << "Items in the order:" << endl;
        for (const auto& item : items) {
            cout << "- Name: " << item->getName() << " | Weight: " << item->getWeight() << "kg | Material: " << item->getMaterial() << endl;
        }
        if (feedback != nullptr) {
            feedback->displayFeedback();
        }
        if (notification != nullptr) {
            notification->displayNotification();
        }
    }
};

class Customer {
public:
    string username;
    string password;
    double balance;
    vector<Service> availableServices; // Vector to store available services
    vector<LaundryItem*> laundryCart;
    vector<LaundryOrder*> orderHistory;
    Service* selectedService; // Pointer to the selected service
    int orderIdCounter;

    // Constructor
    Customer(const string& _username, const string& _password, double _balance = 0.0)
        : username(_username), password(_password), balance(_balance), selectedService(nullptr), orderIdCounter(1) {}

    // Function to add an item to the laundry cart
    void addToCart(LaundryItem* item) {
        laundryCart.push_back(item);
        cout << item->getName() << " added to cart successfully!" << endl;
    }

    // Function to display the laundry cart
    void displayCart() const {
        if (laundryCart.empty()) {
            cout << "Laundry cart is empty." << endl;
        } else {
            cout << "Laundry Cart:" << endl;
            for (const auto& item : laundryCart) {
                cout << "Name: " << item->getName() << " | Weight: " << item->getWeight() << "kg | Material: " << item->getMaterial() << endl;
            }
        }
    }

    // Function to place a laundry order
    void placeOrder() {
        if (laundryCart.empty()) {
            cout << "Cannot place order. Laundry cart is empty." << endl;
        } else {
            // Create a new order
            LaundryOrder* newOrder = new LaundryOrder(orderIdCounter++);

            // Move items from cart to order
            for (const auto& item : laundryCart) {
                newOrder->addItem(item);
            }

            // Update order status
            newOrder->updateStatus("Processing");

            // Add order to history
            orderHistory.push_back(newOrder);

            // Clear the cart
            laundryCart.clear();

            // Ask for feedback
            string fb;
            cout << "Please provide feedback for the order (Good, Normal, Bad): ";
            cin >> fb;
            newOrder->addFeedback(fb);

            // Add a notification
            string notificationMsg = "Your laundry order (ID: " + to_string(newOrder->getOrderId()) + ") has been placed successfully!";
            newOrder->addNotification(notificationMsg);

            cout << "Laundry order placed successfully!" << endl;
        }
    }

    // Function to display order history
    void displayOrderHistory() const {
        if (orderHistory.empty()) {
            cout << "Order history is empty." << endl;
        } else {
            cout << "Laundry Order History:" << endl;
            for (const auto& order : orderHistory) {
                order->displayOrder();
                cout << endl;
            }
        }
    }

    // Function to update the selected service
    void updateService(Service* service) {
        selectedService = service;
    }

    // Function to display selected service
    void displaySelectedService() const {
        if (selectedService != nullptr) {
            cout << "Selected Service: " << selectedService->getName() << " (" << selectedService->getPrice() << " rupees)" << endl;
        } else {
            cout << "No service selected." << endl;
        }
    }

    // Function to add a service
    void addService(const Service& service) {
        availableServices.push_back(service);
    }

    // Function to display available services
    void displayServices() const {
        cout << "Available Services:" << endl;
        for (const auto& service : availableServices) {
            cout << service.getName() << ": " << service.getPrice() << " rupees" << endl;
        }
    }

    // Function to process payment
    void processPayment() {
        PaymentProcessor processor;
        processor.processPayment();
    }
};

